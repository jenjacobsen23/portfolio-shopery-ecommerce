// =============================================================================
// SASS MIXINS & FUNCTIONS
// =============================================================================

// Color Functions
@function color($color-name, $shade: 500) {
  @if $color-name == "primary" {
    @return map-get($primary-colors, $shade);
  } @else if $color-name == "secondary" {
    @return map-get($secondary-colors, $shade);
  } @else if $color-name == "neutral" {
    @return map-get($neutral-colors, $shade);
  } @else if $color-name == "success" {
    @return map-get($success-colors, $shade);
  } @else if $color-name == "warning" {
    @return map-get($warning-colors, $shade);
  } @else if $color-name == "error" {
    @return map-get($error-colors, $shade);
  } @else {
    @error "Unknown color: #{$color-name}";
  }
}

@function contrast-color($color-name, $shade: 500) {
  @if $color-name == "primary" {
    @return map-get(map-get($primary-colors, contrast), $shade);
  } @else if $color-name == "secondary" {
    @return map-get(map-get($secondary-colors, contrast), $shade);
  } @else if $color-name == "neutral" {
    @return map-get(map-get($neutral-colors, contrast), $shade);
  } @else {
    @error "Unknown color: #{$color-name}";
  }
}

// Typography Mixins
@mixin typography(
  $size: "base",
  $weight: "normal",
  $line-height: "normal",
  $family: "primary"
) {
  font-size: map-get($font-sizes, $size);
  font-weight: map-get($font-weights, $weight);
  line-height: map-get($line-heights, $line-height);
  font-family: map-get($font-families, $family);
}

@mixin heading-1 {
  @include typography("6xl", "bold", "tight", "primary");
}

@mixin heading-2 {
  @include typography("5xl", "bold", "tight", "primary");
}

@mixin heading-3 {
  @include typography("4xl", "semibold", "tight", "primary");
}

@mixin heading-4 {
  @include typography("3xl", "semibold", "tight", "primary");
}

@mixin heading-5 {
  @include typography("2xl", "medium", "tight", "primary");
}

@mixin heading-6 {
  @include typography("xl", "medium", "tight", "primary");
}

// UI-specific heading mixins for exact matching
@mixin ui-heading-01 {
  font-size: var(--font-size-heading-01);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-heading);
  font-family: var(--font-family-primary);
}

@mixin ui-heading-02 {
  font-size: var(--font-size-heading-02);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-heading);
  font-family: var(--font-family-primary);
}

@mixin ui-heading-03 {
  font-size: var(--font-size-heading-03);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-heading);
  font-family: var(--font-family-primary);
}

@mixin ui-heading-04 {
  font-size: var(--font-size-heading-04);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-heading);
  font-family: var(--font-family-primary);
}

@mixin ui-heading-05 {
  font-size: var(--font-size-heading-05);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-heading);
  font-family: var(--font-family-primary);
}

@mixin body-large {
  @include typography("lg", "normal", "relaxed", "primary");
}

@mixin body-base {
  @include typography("base", "normal", "relaxed", "primary");
}

@mixin body-small {
  @include typography("sm", "normal", "relaxed", "primary");
}

// UI-specific body text mixins for exact matching
@mixin ui-body-xxl {
  font-size: var(--font-size-body-xxl);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-body-xxl);
  font-family: var(--font-family-primary);
}

@mixin ui-body-xl {
  font-size: var(--font-size-body-xl);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-body-xl);
  font-family: var(--font-family-primary);
}

@mixin ui-body-large {
  font-size: var(--font-size-body-large);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-body-large);
  font-family: var(--font-family-primary);
}

@mixin ui-body-medium {
  font-size: var(--font-size-body-medium);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-body-medium);
  font-family: var(--font-family-primary);
}

@mixin ui-body-small {
  font-size: var(--font-size-body-small);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-body-small);
  font-family: var(--font-family-primary);
}

@mixin ui-body-tiny {
  font-size: var(--font-size-body-tiny);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-body-tiny);
  font-family: var(--font-family-primary);
}

@mixin caption {
  @include typography("xs", "normal", "tight", "primary");
}

@mixin button-text {
  @include typography("sm", "medium", "none", "primary");
  text-transform: uppercase;
  letter-spacing: 0.025em;
}

// Spacing Mixins
@mixin spacing($property, $size) {
  #{$property}: map-get($spacing, $size);
}

@mixin margin($size) {
  @include spacing(margin, $size);
}

@mixin margin-x($size) {
  margin-left: map-get($spacing, $size);
  margin-right: map-get($spacing, $size);
}

@mixin margin-y($size) {
  margin-top: map-get($spacing, $size);
  margin-bottom: map-get($spacing, $size);
}

@mixin padding($size) {
  @include spacing(padding, $size);
}

@mixin padding-x($size) {
  padding-left: map-get($spacing, $size);
  padding-right: map-get($spacing, $size);
}

@mixin padding-y($size) {
  padding-top: map-get($spacing, $size);
  padding-bottom: map-get($spacing, $size);
}

// Layout Mixins
@mixin container($max-width: 1200px) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  @include padding-x(4);
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-start {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

@mixin flex-end {
  display: flex;
  align-items: center;
  justify-content: flex-end;
}

@mixin grid($columns: 1, $gap: 4) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: map-get($spacing, $gap);
}

// Responsive Mixins
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin mobile-first($breakpoint) {
  @include respond-to($breakpoint) {
    @content;
  }
}

@mixin desktop-down($breakpoint) {
  @media (max-width: map-get($breakpoints, $breakpoint) - 1px) {
    @content;
  }
}

// Component Mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: map-get($border-radius, base);
  cursor: pointer;
  transition: all map-get($transitions, fast);
  text-decoration: none;
  @include button-text;
  @include padding-y(3);
  @include padding-x(6);

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  &:focus {
    outline: 2px solid var(--color-border-focus);
    outline-offset: 2px;
  }
}

@mixin button-variant($variant: "primary") {
  @if $variant == "primary" {
    background-color: var(--color-interactive-primary);
    color: contrast-color("primary", 500);

    &:hover:not(:disabled) {
      background-color: var(--color-interactive-primary-hover);
    }

    &:active:not(:disabled) {
      background-color: var(--color-interactive-primary-active);
    }
  } @else if $variant == "secondary" {
    background-color: transparent;
    color: var(--color-interactive-secondary);
    border: 1px solid var(--color-border-primary);

    &:hover:not(:disabled) {
      background-color: var(--color-interactive-secondary-hover);
      border-color: var(--color-border-secondary);
    }

    &:active:not(:disabled) {
      background-color: var(--color-interactive-secondary-active);
    }
  } @else if $variant == "ghost" {
    background-color: transparent;
    color: var(--color-interactive-secondary);

    &:hover:not(:disabled) {
      background-color: var(--color-background-tertiary);
    }
  }
}

@mixin card {
  background-color: var(--color-background-secondary);
  border: 1px solid var(--color-border-primary);
  border-radius: map-get($border-radius, lg);
  box-shadow: map-get($shadows, base);
  @include padding(6);
}

@mixin input-base {
  width: 100%;
  border: 1px solid var(--color-border-primary);
  border-radius: map-get($border-radius, base);
  background-color: var(--color-background-secondary);
  color: var(--color-text-primary);
  @include typography("base", "normal", "normal", "primary");
  @include padding-y(3);
  @include padding-x(4);
  transition: border-color map-get($transitions, fast);

  &:focus {
    outline: none;
    border-color: var(--color-border-focus);
    box-shadow: 0 0 0 3px rgba(var(--color-primary-500), 0.1);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  &::placeholder {
    color: var(--color-text-muted);
  }
}

// Animation Mixins
@mixin fade-in($duration: "normal") {
  animation: fadeIn map-get($transitions, $duration) ease-in-out;
}

@mixin slide-up($duration: "normal") {
  animation: slideUp map-get($transitions, $duration) ease-out;
}

@mixin scale-in($duration: "normal") {
  animation: scaleIn map-get($transitions, $duration) ease-out;
}

// Utility Mixins
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: "";
    display: block;
    padding-bottom: percentage($height / $width);
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Print Mixins
@mixin print-only {
  @media print {
    @content;
  }
}

@mixin screen-only {
  @media screen {
    @content;
  }
}
